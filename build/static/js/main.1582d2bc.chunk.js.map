{"version":3,"sources":["reducers/index.js","utils/handleError.js","utils/helpers.js","store.js","middleware/error.js","utils/isPromise.js","routes/main/index.js","containers/ErrorBoundary.js","routes/Root.js","index.js"],"names":["combineReducers","handleErrors","err","toast","error","response","data","message","retrieveMessage","middleware","applyMiddleware","next","action","value","result","Promise","catch","handleError","thunk","promise","enhancer","composeWithDevTools","persistConfig","key","storage","persistedReducer","persistReducer","rootReducer","store","createStore","persistor","persistStore","Home","lazy","App","fallback","exact","path","component","ErrorBoundary","props","state","hasError","errorInfo","this","children","React","Component","getStore","Root","loading","ReactDOM","render","document","getElementById"],"mappings":"iSAEeA,4BAAgB,I,oBCMhBC,EAJM,SAAAC,GACnBC,IAAMC,MCJuB,SAAAF,GAC7B,OACEA,EAAIG,UACJH,EAAIG,SAASC,MACbJ,EAAIG,SAASC,KAAKF,OAClBF,EAAIG,SAASC,KAAKF,MAAMG,QAEjBL,EAAIG,SAASC,KAAKF,MAAMG,QACtBL,EAAIG,UAAYH,EAAIG,SAASC,MAAQJ,EAAIG,SAASC,KAAKC,QACzDL,EAAIG,SAASC,KAAKC,QAChBL,EAAIK,QACNL,EAAIK,QAEJL,EDTGM,CAAgBN,K,qCEKxBO,EAAaC,2BCPJ,WACb,OAAO,SAAAC,GAAI,OAAI,SAAAC,GACb,ICL8BC,EDK1BC,EAASH,EAAKC,GAClB,OCN8BC,EDMfC,ICLJD,aAAiBE,SACrBF,GAASA,aAAiBE,QDO1BD,EAAOE,OAAM,SAAAZ,GAElB,OADAa,EAAYb,GACLA,KAJAQ,MDGuCM,IAAOC,KACrDC,EAAWC,8BAAoBZ,GAC/Ba,EAAgB,CACpBC,IAAK,SACLC,aAIIC,EAAmBC,YAAeJ,EAAeK,GAExC,aACb,IAAIC,EAAQC,sBAAYJ,EAAkBL,GAE1C,MAAO,CAAEQ,QAAOE,UADAC,YAAaH,K,OGnBzBI,EAAOC,gBAAK,kBAAM,sDAUTC,EARH,kBACV,kBAAC,WAAD,CAAUC,SAAU,WAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWN,O,wECmBxBO,E,YAxBb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAAEC,UAAU,GAFR,E,+EAUDtC,EAAOuC,M,+BAMvB,OAAIC,KAAKH,MAAMC,SAEN,oDAGFE,KAAKJ,MAAMK,Y,gDAhBYzC,GAE9B,MAAO,CAAEsC,UAAU,O,GARKI,IAAMC,W,ECQEC,IAArBpB,E,EAAAA,MAAOE,E,EAAAA,UAgBPmB,EAdF,kBACX,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAUrB,MAAOA,GACf,kBAAC,IAAD,CAAasB,QAAS,KAAMpB,UAAWA,GACrC,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,YCPZqB,IAASC,OAAO,kBAAC,EAAD,CAAMxB,MAAOA,IAAWyB,SAASC,eAAe,W","file":"static/js/main.1582d2bc.chunk.js","sourcesContent":["import { combineReducers } from \"redux\";\n\nexport default combineReducers({});\n","import { toast } from \"react-toastify\";\nimport { retrieveMessage } from \"./helpers\";\n\n//catch errors globally and toast them\nconst handleErrors = err => {\n  toast.error(retrieveMessage(err));\n};\n\nexport default handleErrors;\n","//error message retriver\nexport const retrieveMessage = err => {\n  if (\n    err.response &&\n    err.response.data &&\n    err.response.data.error &&\n    err.response.data.error.message\n  ) {\n    return err.response.data.error.message;\n  } else if (err.response && err.response.data && err.response.data.message) {\n    return err.response.data.message;\n  } else if (err.message) {\n    return err.message;\n  } else {\n    return err;\n  }\n};\n","import thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\nimport promise from \"redux-promise-middleware\";\nimport errorMiddleware from \"./middleware/error\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\n// import hardSet from \"redux-persist/lib/stateReconciler/hardSet\";\n\nconst middleware = applyMiddleware(errorMiddleware, thunk, promise);\nconst enhancer = composeWithDevTools(middleware);\nconst persistConfig = {\n  key: \"spaces\",\n  storage\n  // stateReconciler: hardSet\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport default () => {\n  let store = createStore(persistedReducer, enhancer);\n  let persistor = persistStore(store);\n  return { store, persistor };\n};\n","import isPromise from \"../utils/isPromise\";\nimport handleError from \"../utils/handleError\";\n\nexport default function errorMiddleware() {\n  return next => action => {\n    let result = next(action);\n    if (!isPromise(result)) {\n      return action;\n    }\n    return result.catch(error => {\n      handleError(error);\n      return error;\n    });\n  };\n}\n","export default function isPromise(value) {\n  if (value && value instanceof Promise) {\n    return value && value instanceof Promise;\n  }\n  return false;\n}\n","import React, { Suspense, lazy } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\nconst Home = lazy(() => import(\"../../containers/Home\"));\n\nconst App = () => (\n  <Suspense fallback={\"loading\"}>\n    <Switch>\n      <Route exact path=\"/\" component={Home} />\n    </Switch>\n  </Suspense>\n);\n\nexport default App;\n","import React from \"react\";\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // You can also log the error to an error reporting service\n    // logErrorToMyService(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong</h1>;\n    }\n\n    return this.props.children;\n  }\n}\nexport default ErrorBoundary;\n","import React from \"react\";\n\nimport App from \"./main\";\n\nimport getStore from \"../store\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { HelmetProvider } from \"react-helmet-async\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport ErrorBoundary from \"../containers/ErrorBoundary\";\nexport const { store, persistor } = getStore();\n\nconst Root = () => (\n  <ErrorBoundary>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <HelmetProvider>\n          <BrowserRouter>\n            <App />\n          </BrowserRouter>\n        </HelmetProvider>\n      </PersistGate>\n    </Provider>\n  </ErrorBoundary>\n);\n\nexport default Root;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles/index.css\";\nimport \"./styles/animate.css\";\nimport \"./styles/styles.css\";\n\nimport store from \"./store\";\nimport Root from \"./routes/Root\";\n// import register from \"./serviceWorker\";\n\nReactDOM.render(<Root store={store} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// register();\n"],"sourceRoot":""}